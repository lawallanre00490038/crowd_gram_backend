"""create tables

Revision ID: a7d89ed0872e
Revises: 
Create Date: 2025-09-26 09:33:46.569203

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

# revision identifiers, used by Alembic.
revision: str = 'a7d89ed0872e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('project',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('per_user_quota', sa.Integer(), nullable=False),
    sa.Column('reuse_count', sa.Integer(), nullable=True),
    sa.Column('agent_coin', sa.Float(), nullable=False),
    sa.Column('reviewer_coin', sa.Float(), nullable=False),
    sa.Column('super_reviewer_coin', sa.Float(), nullable=False),
    sa.Column('agent_amount', sa.Float(), nullable=False),
    sa.Column('reviewer_amount', sa.Float(), nullable=False),
    sa.Column('super_reviewer_amount', sa.Float(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('review_parameters', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('review_scale', sa.Integer(), nullable=False),
    sa.Column('review_threshold_percent', sa.Float(), nullable=False),
    sa.Column('total_prompts', sa.Integer(), nullable=False),
    sa.Column('total_tasks', sa.Integer(), nullable=False),
    sa.Column('total_submissions', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('role', sa.Enum('admin', 'agent', 'reviewer', 'super_reviewer', name='role'), nullable=False),
    sa.Column('gender', sa.Enum('male', 'female', 'other', name='gender'), nullable=True),
    sa.Column('age_group', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('edu_level', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('languages', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('dialects', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('telegram_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('auditlog',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('action_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('details', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('prompt',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('text', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('media_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('domain', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('max_reuses', sa.Integer(), nullable=True),
    sa.Column('current_reuses', sa.Integer(), nullable=False),
    sa.Column('total_allocated', sa.Integer(), nullable=False),
    sa.Column('total_submitted', sa.Integer(), nullable=False),
    sa.Column('total_accepted', sa.Integer(), nullable=False),
    sa.Column('total_rejected', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('task',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('prompt_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('type', sa.Enum('audio', 'text', 'image', 'video', name='tasktype'), nullable=False),
    sa.Column('domain', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('pending', 'in_progress', 'assigned', 'submitted', 'under_review', 'reviewed', 'accepted', 'approved', 'rejected', 'revoked', name='status'), nullable=False),
    sa.Column('deadline', sa.DateTime(), nullable=True),
    sa.Column('submission_count', sa.Integer(), nullable=False),
    sa.Column('review_count', sa.Integer(), nullable=False),
    sa.Column('accept_count', sa.Integer(), nullable=False),
    sa.Column('reject_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['prompt_id'], ['prompt.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('projectallocation',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('task_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('user_email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('pending', 'in_progress', 'assigned', 'submitted', 'under_review', 'reviewed', 'accepted', 'approved', 'rejected', 'revoked', name='status'), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('coinpayment',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('task_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('assignment_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('coins_earned', sa.Float(), nullable=False),
    sa.Column('approved', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['assignment_id'], ['projectallocation.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('submission',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('task_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('assignment_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('audio', 'text', 'image', 'video', name='tasktype'), nullable=False),
    sa.Column('file_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('duration', sa.Float(), nullable=True),
    sa.Column('payload_text', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('pending', 'in_progress', 'assigned', 'submitted', 'under_review', 'reviewed', 'accepted', 'approved', 'rejected', 'revoked', name='status'), nullable=False),
    sa.Column('meta', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['assignment_id'], ['projectallocation.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['task.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('review',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('submission_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('reviewer_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('review_level', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('scores', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('total_score', sa.Float(), nullable=True),
    sa.Column('decision', sa.Enum('pending', 'in_progress', 'assigned', 'submitted', 'under_review', 'reviewed', 'accepted', 'approved', 'rejected', 'revoked', name='status'), nullable=True),
    sa.Column('comments', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('approved', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['reviewer_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['submission_id'], ['submission.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reviewerallocation',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('submission_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('reviewer_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('pending', 'in_progress', 'assigned', 'submitted', 'under_review', 'reviewed', 'accepted', 'approved', 'rejected', 'revoked', name='status'), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.Column('reviewed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['reviewer_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['submission_id'], ['submission.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reviewerallocation')
    op.drop_table('review')
    op.drop_table('submission')
    op.drop_table('coinpayment')
    op.drop_table('projectallocation')
    op.drop_table('task')
    op.drop_table('prompt')
    op.drop_table('auditlog')
    op.drop_table('user')
    op.drop_table('project')
    # ### end Alembic commands ###
